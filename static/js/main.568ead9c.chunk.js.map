{"version":3,"sources":["App.js","index.js"],"names":["item","id","v4","name","img","item2","item3","App","useState","key","title","items","state","setState","useEffect","forEach","el","console","log","className","onDragEnd","destination","source","index","droppableId","itemCopy","filter","prev","splice","map","provided","ref","innerRef","droppableProps","draggableId","draggableProps","dragHandleProps","src","alt","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAKMA,EAAO,CACZC,GAAIC,cACJC,KAAM,OACNC,IAAK,yDAEAC,EAAQ,CACbJ,GAAIC,cACJC,KAAM,OACNC,IAAK,2DAGAE,EAAQ,CACbL,GAAIC,cACJC,KAAM,QACNC,IAAK,2DA4GSG,MAzGf,WACC,MAA0BC,mBAAS,CAClC,CACCC,IAAK,OACLC,MAAO,OACPC,MAAO,CAACX,EAAMK,EAAOC,IAEtB,CACCG,IAAK,cACLC,MAAO,OACPC,MAAO,IAER,CACCF,IAAK,OACLC,MAAO,OACPC,MAAO,MAdT,mBAAOC,EAAP,KAAcC,EAAd,KAwDA,OAJAC,qBAAU,WACTF,EAAMG,SAAQ,SAACC,GAAD,OAAQC,QAAQC,IAAIF,EAAGN,MAAOM,EAAGL,YAC7C,CAACC,IAGH,qBAAKO,UAAU,MAAf,SACC,cAAC,IAAD,CAAiBC,UAzCG,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OAGrC,GAAKD,EAIL,GACCA,EAAYE,QAAUD,EAAOC,OAC7BF,EAAYG,cAAgBF,EAAOE,YAFpC,CAQA,IAAMC,EAAQ,eACVb,EAAMc,QAAO,SAACV,GAAD,OAAQA,EAAE,MAAYM,EAAOE,eAAa,GAAGb,MAC5DW,EAAOC,QAGTV,GAAS,SAACc,GAYT,OAXAA,EAAI,YAAOA,IAGTD,QAAO,SAACV,GAAD,OAAQA,EAAE,MAAYM,EAAOE,eAAa,GACjDb,MAAMiB,OAAON,EAAOC,MAAO,GAG7BI,EACED,QAAO,SAACV,GAAD,OAAQA,EAAE,MAAYK,EAAYG,eAAa,GACtDb,MAAMiB,OAAOP,EAAYE,MAAO,EAAGE,GAE9BE,UArBPV,QAAQC,IAAI,8BAPZD,QAAQC,IAAI,6BAqCZ,SACEN,EAAMiB,KAAI,SAACb,GAAD,OACV,sBAAkBG,UAAU,SAA5B,UACC,6BAAKH,EAAGN,QACR,cAAC,IAAD,CAAWc,YAAaR,EAAGP,IAA3B,SACE,SAACqB,GACD,OACC,8CACCC,IAAKD,EAASE,UACVF,EAASG,gBAFd,IAGCd,UAAU,gBAHX,UAKEH,EAAGL,MAAMkB,KAAI,SAAC7B,EAAMuB,GAAP,OACb,cAAC,IAAD,CAECA,MAAOA,EACPW,YAAalC,EAAKC,GAHnB,SAKE,SAAC6B,GAAD,OACA,yDACCX,UAAU,OACVY,IAAKD,EAASE,UACVF,EAASK,gBACTL,EAASM,iBAJd,aAOC,qBAAKC,IAAKrC,EAAKI,IAAKkC,IAAI,OAAOnB,UAAU,eAZtCnB,EAAKC,OAoBX6B,EAASS,qBAhCLvB,EAAGP,aC9ElB+B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.568ead9c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { v4 } from \"uuid\";\n\nconst item = {\n\tid: v4(),\n\tname: \"fire\",\n\timg: \"https://cdn-icons-png.flaticon.com/512/599/599502.png\",\n};\nconst item2 = {\n\tid: v4(),\n\tname: \"rock\",\n\timg: \"https://cdn-icons-png.flaticon.com/512/4405/4405457.png\",\n};\n\nconst item3 = {\n\tid: v4(),\n\tname: \"water\",\n\timg: \"https://cdn-icons-png.flaticon.com/512/3105/3105807.png\",\n};\n\nfunction App() {\n\tconst [state, setState] = useState([\n\t\t{\n\t\t\tkey: \"todo\",\n\t\t\ttitle: \"Box1\",\n\t\t\titems: [item, item2, item3],\n\t\t},\n\t\t{\n\t\t\tkey: \"in-progress\",\n\t\t\ttitle: \"Box2\",\n\t\t\titems: [],\n\t\t},\n\t\t{\n\t\t\tkey: \"done\",\n\t\t\ttitle: \"Box3\",\n\t\t\titems: [],\n\t\t},\n\t]);\n\tconst handleDragEnd = ({ destination, source }) => {\n\t\t// console.log(\"from\", source);\n\t\t// console.log(\"to\", destination);\n\t\tif (!destination) {\n\t\t\tconsole.log(\"not dropped in droppable\");\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\tdestination.index === source.index &&\n\t\t\tdestination.droppableId === source.droppableId\n\t\t) {\n\t\t\tconsole.log(\"dropped in same place\");\n\t\t\treturn;\n\t\t}\n\t\t// Creating a copy of item before removing it from state.\n\t\tconst itemCopy = {\n\t\t\t...state.filter((el) => el[\"key\"] === source.droppableId)[0].items[\n\t\t\t\tsource.index\n\t\t\t],\n\t\t};\n\t\tsetState((prev) => {\n\t\t\tprev = [...prev];\n\t\t\t// Remove from previous items array\n\t\t\tprev\n\t\t\t\t.filter((el) => el[\"key\"] === source.droppableId)[0]\n\t\t\t\t.items.splice(source.index, 1);\n\n\t\t\t// Adding to new items array location\n\t\t\tprev\n\t\t\t\t.filter((el) => el[\"key\"] === destination.droppableId)[0]\n\t\t\t\t.items.splice(destination.index, 0, itemCopy);\n\n\t\t\treturn prev;\n\t\t});\n\t};\n\tuseEffect(() => {\n\t\tstate.forEach((el) => console.log(el.title, el.items));\n\t}, [state]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<DragDropContext onDragEnd={handleDragEnd}>\n\t\t\t\t{state.map((el) => (\n\t\t\t\t\t<div key={el.key} className=\"column\">\n\t\t\t\t\t\t<h3>{el.title}</h3>\n\t\t\t\t\t\t<Droppable droppableId={el.key}>\n\t\t\t\t\t\t\t{(provided) => {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tref={provided.innerRef}\n\t\t\t\t\t\t\t\t\t\t{...provided.droppableProps}\n\t\t\t\t\t\t\t\t\t\tclassName=\"droppable-col\"\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{el.items.map((item, index) => (\n\t\t\t\t\t\t\t\t\t\t\t<Draggable\n\t\t\t\t\t\t\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\t\t\t\t\t\t\tindex={index}\n\t\t\t\t\t\t\t\t\t\t\t\tdraggableId={item.id}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t{(provided) => (\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"item\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tref={provided.innerRef}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{...provided.draggableProps}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{...provided.dragHandleProps}\n\t\t\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/* {item.name} */}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img src={item.img} alt=\"item\" className=\"items\" />\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{/* <span {...provided.dragHandleProps}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tDrag by me\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span> */}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t\t\t\t\t</Draggable>\n\t\t\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t\t\t\t{provided.placeholder}\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t</Droppable>\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t</DragDropContext>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}